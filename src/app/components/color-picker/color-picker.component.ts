import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport interface ColorOption {\n  name: string;\n  value: string;\n  hex: string;\n  selected?: boolean;\n}\n\n@Component({\n  selector: 'app-color-picker',\n  template: `\n    <div class=\"color-picker-container\">\n      <!-- Color Picker Header -->\n      <div class=\"color-picker-header\" *ngIf=\"showLabel\">\n        <label class=\"color-label\">\n          <i class=\"fas fa-palette ml-2\"></i>\n          {{label || 'انتخاب رنگ'}}\n          <span class=\"required-mark\" *ngIf=\"required\">*</span>\n        </label>\n        <div class=\"selected-info\" *ngIf=\"selectedColors.length > 0\">\n          <span class=\"selected-count\">{{selectedColors.length}} رنگ انتخاب‌شده</span>\n        </div>\n      </div>\n\n      <!-- Predefined Colors Grid -->\n      <div class=\"predefined-colors\" *ngIf=\"showPredefinedColors\">\n        <h4 class=\"section-title\">رنگ‌های پیش‌فرض</h4>\n        <div class=\"color-grid\">\n          <div \n            *ngFor=\"let color of predefinedColors\" \n            class=\"color-option\"\n            [class.selected]=\"isColorSelected(color.value)\"\n            [style.background-color]=\"color.hex\"\n            [attr.title]=\"color.name\"\n            (click)=\"toggleColor(color)\">\n            \n            <!-- Selection indicator -->\n            <div class=\"selection-indicator\" *ngIf=\"isColorSelected(color.value)\">\n              <i class=\"fas fa-check\"></i>\n            </div>\n            \n            <!-- Color name tooltip -->\n            <div class=\"color-tooltip\">{{color.name}}</div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Custom Color Input -->\n      <div class=\"custom-color-section\" *ngIf=\"allowCustomColors\">\n        <h4 class=\"section-title\">رنگ سفارشی</h4>\n        <div class=\"custom-color-input\">\n          <div class=\"color-input-group\">\n            <input \n              type=\"color\" \n              #colorInput\n              class=\"color-input\"\n              (change)=\"onCustomColorChange(colorInput.value)\">\n            <input \n              type=\"text\" \n              class=\"color-name-input\"\n              [(ngModel)]=\"customColorName\"\n              placeholder=\"نام رنگ (مثال: آبی آسمانی)\"\n              (keypress)=\"onCustomColorNameKeyPress($event, colorInput.value)\">\n            <button \n              type=\"button\"\n              class=\"add-color-btn\"\n              [disabled]=\"!customColorName.trim()\"\n              (click)=\"addCustomColor(colorInput.value)\">\n              <i class=\"fas fa-plus\"></i>\n              افزودن\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- Selected Colors Display -->\n      <div class=\"selected-colors\" *ngIf=\"selectedColors.length > 0\">\n        <h4 class=\"section-title\">رنگ‌های انتخاب‌شده</h4>\n        <div class=\"selected-colors-list\">\n          <div \n            *ngFor=\"let color of selectedColors; trackBy: trackByColorValue\" \n            class=\"selected-color-item\">\n            <div \n              class=\"color-square\"\n              [style.background-color]=\"color.hex\"\n              [attr.title]=\"color.name\">\n            </div>\n            <span class=\"color-name\">{{color.name}}</span>\n            <button \n              type=\"button\"\n              class=\"remove-color-btn\"\n              (click)=\"removeColor(color)\"\n              [attr.title]=\"'حذف ' + color.name\">\n              <i class=\"fas fa-times\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <!-- Empty State -->\n      <div class=\"empty-state\" *ngIf=\"selectedColors.length === 0 && showEmptyState\">\n        <div class=\"empty-content\">\n          <i class=\"fas fa-palette empty-icon\"></i>\n          <p class=\"empty-message\">هنوز رنگی انتخاب نشده است</p>\n          <p class=\"empty-description\">رنگ‌های موجود برای این محصول را انتخاب کنید</p>\n        </div>\n      </div>\n\n      <!-- Validation Error -->\n      <div class=\"validation-error\" *ngIf=\"showError && errorMessage\">\n        <i class=\"fas fa-exclamation-triangle\"></i>\n        <span>{{errorMessage}}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./color-picker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => ColorPickerComponent),\n      multi: true\n    }\n  ]\n})\nexport class ColorPickerComponent implements ControlValueAccessor {\n  @Input() label: string = 'انتخاب رنگ';\n  @Input() required: boolean = false;\n  @Input() multiple: boolean = true;\n  @Input() showLabel: boolean = true;\n  @Input() showPredefinedColors: boolean = true;\n  @Input() allowCustomColors: boolean = true;\n  @Input() showEmptyState: boolean = true;\n  @Input() maxSelections: number = 10;\n  @Input() showError: boolean = false;\n  @Input() errorMessage: string = '';\n\n  @Output() colorsChanged = new EventEmitter<ColorOption[]>();\n  @Output() colorAdded = new EventEmitter<ColorOption>();\n  @Output() colorRemoved = new EventEmitter<ColorOption>();\n\n  selectedColors: ColorOption[] = [];\n  customColorName: string = '';\n\n  // Persian color names with their hex values\n  predefinedColors: ColorOption[] = [\n    { name: 'قرمز', value: 'red', hex: '#DC2626' },\n    { name: 'آبی', value: 'blue', hex: '#2563EB' },\n    { name: 'سبز', value: 'green', hex: '#059669' },\n    { name: 'زرد', value: 'yellow', hex: '#D97706' },\n    { name: 'بنفش', value: 'purple', hex: '#7C3AED' },\n    { name: 'صورتی', value: 'pink', hex: '#DB2777' },\n    { name: 'نارنجی', value: 'orange', hex: '#EA580C' },\n    { name: 'آبی آسمانی', value: 'sky', hex: '#0EA5E9' },\n    { name: 'سبز روشن', value: 'lime', hex: '#65A30D' },\n    { name: 'بنفش روشن', value: 'violet', hex: '#8B5CF6' },\n    { name: 'قهوه‌ای', value: 'brown', hex: '#A16207' },\n    { name: 'خاکستری', value: 'gray', hex: '#6B7280' },\n    { name: 'مشکی', value: 'black', hex: '#1F2937' },\n    { name: 'سفید', value: 'white', hex: '#F9FAFB' },\n    { name: 'کرم', value: 'cream', hex: '#FEF3C7' },\n    { name: 'طلایی', value: 'gold', hex: '#F59E0B' }\n  ];\n\n  // ControlValueAccessor implementation\n  private onChange = (value: ColorOption[]) => {};\n  private onTouched = () => {};\n\n  writeValue(value: ColorOption[]): void {\n    if (value && Array.isArray(value)) {\n      this.selectedColors = [...value];\n    } else {\n      this.selectedColors = [];\n    }\n  }\n\n  registerOnChange(fn: (value: ColorOption[]) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    // Handle disabled state if needed\n  }\n\n  /**\n   * Check if a color is selected\n   */\n  isColorSelected(colorValue: string): boolean {\n    return this.selectedColors.some(color => color.value === colorValue);\n  }\n\n  /**\n   * Toggle color selection\n   */\n  toggleColor(color: ColorOption): void {\n    if (this.isColorSelected(color.value)) {\n      this.removeColor(color);\n    } else {\n      this.addColor(color);\n    }\n  }\n\n  /**\n   * Add color to selection\n   */\n  addColor(color: ColorOption): void {\n    if (this.selectedColors.length >= this.maxSelections) {\n      return;\n    }\n\n    if (!this.multiple) {\n      this.selectedColors = [color];\n    } else if (!this.isColorSelected(color.value)) {\n      this.selectedColors.push({ ...color });\n    }\n\n    this.emitChanges();\n    this.colorAdded.emit(color);\n    this.onTouched();\n  }\n\n  /**\n   * Remove color from selection\n   */\n  removeColor(color: ColorOption): void {\n    this.selectedColors = this.selectedColors.filter(c => c.value !== color.value);\n    this.emitChanges();\n    this.colorRemoved.emit(color);\n    this.onTouched();\n  }\n\n  /**\n   * Handle custom color change\n   */\n  onCustomColorChange(hexValue: string): void {\n    // Auto-generate name if empty\n    if (!this.customColorName.trim()) {\n      this.customColorName = this.generateColorName(hexValue);\n    }\n  }\n\n  /**\n   * Handle custom color name key press\n   */\n  onCustomColorNameKeyPress(event: KeyboardEvent, hexValue: string): void {\n    if (event.key === 'Enter' && this.customColorName.trim()) {\n      this.addCustomColor(hexValue);\n    }\n  }\n\n  /**\n   * Add custom color\n   */\n  addCustomColor(hexValue: string): void {\n    if (!this.customColorName.trim()) {\n      return;\n    }\n\n    const customColor: ColorOption = {\n      name: this.customColorName.trim(),\n      value: `custom_${Date.now()}`,\n      hex: hexValue\n    };\n\n    this.addColor(customColor);\n    this.customColorName = '';\n  }\n\n  /**\n   * Generate color name from hex value\n   */\n  private generateColorName(hex: string): string {\n    // Simple color name generation based on hex value\n    const colorNames = [\n      'قرمز سفارشی', 'آبی سفارشی', 'سبز سفارشی', 'زرد سفارشی',\n      'بنفش سفارشی', 'صورتی سفارشی', 'نارنجی سفارشی', 'رنگ سفارشی'\n    ];\n    return colorNames[Math.floor(Math.random() * colorNames.length)];\n  }\n\n  /**\n   * Track by function for selected colors\n   */\n  trackByColorValue(index: number, color: ColorOption): string {\n    return color.value;\n  }\n\n  /**\n   * Emit changes to parent components\n   */\n  private emitChanges(): void {\n    this.onChange(this.selectedColors);\n    this.colorsChanged.emit([...this.selectedColors]);\n  }\n}\n